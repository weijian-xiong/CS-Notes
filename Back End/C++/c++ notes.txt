Stack: push, pop, peek
Queue: enqueue, dequeue, peek
BinaryTree: insert, remove, retrieve

variables :
myVar
 MyVar - not recommended
 _myVar
 !myVar - invalid
 myReallyReallyLongAndStupidVariableName
 my_really_really_long_and_stupid_variable_name

 float main;
 char include;


 cout << “Hello” << “\rHey” ;
 output: Heylo 

bool myBool    
myBool = 0; False
 myBool = 1; True
 myBool = False; False
 myBool = 10; True
 myBool = anything but 0; True


 char lowerA = ‘a’, upperA = ‘A’

 if (lowerA > upperA)
 cout << “ lowerA wins”;

 output: lowerA wins



 #include <iostream>
 #include “Random.h”

 using namespace std;

 int main ()
 {
 int randomNum;

 randomNum = getRandomInt (0, 1000);
 cout << randomNum << endl;
 return 0;
 }

 output:
 41
 same number single time


 int main ()
 {
 int randomNum;
seedRandom();
 randomNum = getRandomInt (0, 1000);
 cout << randomNum << endl;
 return 0;
 }

 output:
 713
 213
 532
 12

 #include “Random.h”
 int main ()
 {
 const int LOW = 1;
 const int HIGH = 11;

 int randomNum;
 int userGuess;

 seedRandom();
 randomNum = getRandomInt (LOW, HIGH);

 cout << “Please enter a number between 1 - 10 : ” ;
 cin >> userGuess;

 if (userGuess < LOW) || (userGuess > HIGH)
 cout << “ Run program and enter a valid guess” << endl;
 return 1;

 if (userGuess >= Low) && (userGuess <=HIGH)
 {
 if (userGuess == randomNum)
 cout << “You guessed correctly”<< endl;
 else
 cout << “You guessed incorrectly, the number was ” << randomNum << endl;
 }
 else
 {
 cout << “ Run program and enter a valid guess” << endl;
 return 1;
 }

 return 0;
 }


 int a, b;

 // a = 3/6.0;  // type coercion
 a = 3 / static_cast<int>(6.0);  //static Cast
 // a = 3/6;
 b = 3 % static_cast<int>(6.0);


 sum = sum + amount;

 sum = 5;
 a = ++sum;
 cout << a << sum ;

 output: a = 6; sum = 6;
 a = sum++;
 cout << a << sum;

 output: a = 6; sum = 7;



 #include <iostream>
 #include <iomanip>

 using namespace std;

 int main() {

 const float PIE = 3.14159265359;
 float multPie;

 cout << fixed << setprecision(2) << setw(12);
 cout << PIE << endl;
 multPie = PIE * 100000000;
 cout << multPie << endl;


 }


 g++ -c myProgram.cpp   // generates myProgram.o
 g++ -o myProgram.exe myProgram.o   //generates  .exe
 g++ -Wall -c myProgram.cpp   // generates .o
 g++ -o lab8 lab8_main.o lab8_functions.o // generates exe combined lab8.h lab8_maian.cpp and lab8_functions.cpp


 g++ -c MyProgram.cpp
 g++ -c Random.cpp
 g++ -c MyProg.exe  *.o

 g++ - Wall -o myProgram.cpp

 //Windows
 RunMe.bat
 cls
 g++ -c MyProgram.cpp
 g++ -c Random.cpp
 g++ -o MyProg.exe  *.o
 MyProg.exe


 //Mac
 RunMe.sh
 clear
 g++ -c MyProgram.cpp
 g++ -c Random.cpp
 g++ -o MyProg.exe  *.o
 ./MyProg.exe

 <- chmod 777 MyProg.sh

 //g++ -o name.sh sample.cpp
 //./name.sh






 int a;
 char b;

 cout << “Enter a number: ”;
 cin>>a;
 cin.ignore();
 cout << “Enter a letter : ”;
 cin.get(b);
 return 0;

 getline(cin, b);

 char ch;
 cout << “Press enter to continue :”;
 cin.get (ch);
 cout << “Paused again, enter to continue :”;
 ch = cin.get();
 cout << “Paused AGAIN. Enter to continue :”;



 #include <iostream>
 #include <cmath>

 using namespace std;

 int main()
 {
 int x, y, z;
 cout << “Enter the first number” ;
 cin >> x;
 cout << “Enter the second number”;
 cin >> y;
 z = pow(x, y);

 return 0;
 }
 if (myGrade == ‘A’);(means do nothing if myGrade = A)
 cout << “You got an A, great job!”;
 else if (myGrade ==‘C’)
 cout<< “You got C”;
 else
 cout<< “You failed”;
 cout<< “Try again”;

 if myGrade = C, then output :You got C Try again

 (!<=)  means (>)


 x?y:z
 if (x)
 y
 else
 z

 //
 ST => AM/FM/CD/Bluetooth Radio
 Power Windows
 Power Doors
 Moonroof

 LT => Leather seats
 Navigation/GPS
 4WD
 All options on ST model

 SLT => Entertainment system
 Heated seats
 19’’ wheels
 All options on the LT model
 //



 switch(userInput)
 case 1:
 break;

 case 2:
 break;

 case 3:
 break;

 default:(if not 1,2,3 then do default)
 no break example:

 switch(userInput)
 case 3: cout << “Entertainment system
 Heated seats
 19’’ wheels ” >> endl;


 case 2: cout << “ Leather seats
 Navigation/GPS
 4WD ” >> endl;


 case 1: cout << “AM/FM/CD/Bluetooth Radio
 Power Windows
 Power Doors
 Moonroof ” >> endl;


 default: cout << “enter a valid option ”<< endl;
 if no break, cases will add together.



 int x = 5;
 if(x = 2 )            = not == , = store 2 to variable x

 cout << “you win” << endl;

 else
 cout << “you lose” << endl;
 cout << “yeah” << endl;

 output:        you win
 yeah




 const int SENTINEL = 4;
 int userInput = 0;
 int numberEntered = 0;
 int sum = 0;
 float average ;

 do
 {
 sum += userInput;
 numberEntered++;
 cout << “Enter a number to the list (Enter 4 to quit) ”;
 cin >> userInput;

 }while (userInput != SENTINEL);

 numberEntered—;
 average = static_cast<float>(sum)/numberEntered;
 cout << “The average is :” << average << endl;

 return 0;


 or:
 while (userInput != SENTINEL)
 {
 cout << “Enter a number”
 cin >> userInput;
 sum += userInput;
 numberEntered++;
 }
 numberEntered—;
 sum -= SENTINEL;
 average = static_cast<float>(sum)/numberEntered;
 cout << “The average is :” << average << endl;

return 0;



do
{
     if (a == b)
     continue; (it will skip all until next text)
     if ( a == c)
     if ( a == d)
}while

_____________________(store data to file and output file from file)

#include <iostream>
#include <fstream>

using namespace std;

int main( )
{
     int dailySales, numStores, histoSales;
     string filename;
         
     ifstream inFile;
     ofstream outFile;
     
do
{
     cout << “What is the input file name? :"
     cin >> filename;
     inFile.open(filename.c_str());
     outFile.open(filename.c_str());
} while (!inFile)
inFile >> numStores;

outFile << “SALES BAR CHART” << endl;
outFile << “Each * is equal to $100” << endl;

for( i= 1; i <= numStores; i++)
{
     inFile >> dailySales;
     histoSales = dailySales / 100;
     outFile << “Store “ << i << “ : “;
     for (j = 1; j <= histoSales; j++)
          outFile << “ * ”;
     outFile << endl;
}
 inFile.close();
outFile.close();
return 0;
}


int grade[5];
int gpa[5];
char myName[] = ‘Charlie'


for (int i =0; i < 5; i++）
grade[i] = gpa[i];



my2DArray[5][10];
for(int i = 0; i < 5; i++)
    {
       for (int j =0; j < 10; j++) 
        {
                 my2DArray[i][j] = (i+1)*(j+1);
         }
     }

for(int i = 0; i < 5; i++)
    {
       for (int j =0; j < 10; j++) 
        {
                 cout << setw(4) <<  my2DArray[i][j] << "  " << endl;
         }
     }


string nyName[5];
float theGrades[5];

for (int i =0; i < 5; i++)
{
    cout << "Enter the person's name : ";
    cin >> myName[i];
    cout << "Enter the person's grade : ";
    cin >> theGrade[i];
    
}
for (int i =0; i < 5; i++)
cout << setw(10) << myName[i] << "\t\t";
cout << theGrade[i] << endl;


#include <vector>

int main(){


vector<int> number;
vector<int> number2 (10, 2); initialize from 2
vector<string> names; 

int numStudents;
cout << "How many students do you have ?";
cin >> numStudents;

for (int i =0; i < numStudents; i++)
{
     cout << "Enter a grade : ";
     cin >> tempNumber;
      number.push_back = tempNumber;
     number.pop
}



int main(int argv, char** argc)
{
for (int i = 0; i < argv; i++ )
    {
        cout << "Argc[" << i << "] = " << argc[i] << endl;
    }
}

input: I love you
output:
argc[0] = I
argc[1] = love
argc[2] = you


prototyping:

int myFunction (int);

int main()
{
int num
num = myFunction(12);
return 0;
}

int myFunction( int a )
{
    return a*2;
}


example:

const int COLS = 10;
void fillArray (int myArray[], int size);
void manipulate (int myArray[], int size);
void printArray (int myArray[],int size);
void secondArray (int myArray[][COLS]);

int main();
{
int size =10;
int mA[size];
int ndim[size][size];

fillArray[mA,size];
manipulateArray[mA,size];
printArray[mA,size];

retun 0;
}

void fillArray(int myArray[], int size)
{
     for(int i = 0; i<size; i++)
          myArray[i]=i;
}
void manipulate(int myArray[], int size)
{
    for(int i =0; i<size; i++)
    myArray[i] *=2;

 }
void printArray(int myArray[],int size)
{
    for(int i =0; i<size; i++)
    cout << myArray[i] <<endl;
}





#include<iostream>
using namespace std;

bool isPrime (int number)
{
    int half = number / 2;
    int count = 0;

    if(number ==1)
     return false;

    for (int i= 1; i<=half; i++)
          {
                   if(number % i ==0)
                   count++;
         }
          if (count ==1)
          return true;
          else
          return false;
}

int main(){

for (int i=1; i<=100; i++)
{
      if (isPrime(i))
    cout << i <<endl;
}
}



void printByValue (int);
void printByReference (int&);
void printByPointer (int*);

int main()
{
int value = 99;
printByValue(value);
printByReference(value);
printByPointer(&value);
 return 0;
}

void printByValue{int a)
{
 cout << a << endl;

 }

viodprintByReference(int & a)
{
a = a+1;
cout << a << endl;
}

void printByPointer(int *a)
{
*a +=1;
cout << *a << endl;
}




int* resize(int*, int&)
int main()
{
int *myArray = new int[maxsize];

 while(!inFile.eof())
{
 inFile >> datapoint;
if(currentsize = maxsize)
myArray = resizeArray(myArray, maxsize);
myArray[currentsize] = datapoint;
currentsize++;
}

cout << "The max size of this array is : " << maxsize;
cout << "Current size is : " << currentsize;
for(int i= 0; i < currentsize; i++)
cout << myArray[i];

inFile.close();


return 0;
}

int* resizeArray(int * array, int & size)
{ 
int * newArray = new int[ size * 2 ];

for(int i= 0; i < size; i++)
{
newArray [i] = array[i];
}
delete array;
size*=2; 
return newArray;
